

# Доступен список numbers. Он должен вывести индекс максимального элемента в этом списке.
# numbers = [-7724, 5023, 3197, -102, -4129, -880, 5857, -2866, -8913, 1195, 9809, 5347, -8071, 903, 3030, -4347, -3354, 1024, 8670, 4210, -5228, 8900, 4823, -2002, 4900, 9520, -3658, 1104, -9554, 3064, 9632, -8701, 3384, 4370, 2034, 7822, -9694, 3347, 7440, -8459, 3238, -5193, -3381, 5281, 9022, 5559, 7593, -6540, -6204, -2483, 8729, 5810, -8254, -9846, -1801, 4882, 3838, -3140, 7609, -3325, 6026, 2994, -1677, 1266, -1893, -4408, -5722, -2841, 9812, 5837, -7474, 4624, -664, 6998, 7888, -971, 8810, 3812, -5396, 2593, 512, -4634, 9735, -3062, 9031, -9300, 3657, 6332, 7552, 8125, -725, 4392, 1727, 8194, -2828, -4314, -8967, -7912, -1363, -5957]
#
# print(numbers.index(max(numbers)))
# # или
# print(max(enumerate(numbers), key=lambda x: x[1])[0])


# Функция должна возвращать единственное число — количество объектов из списка objects, которые принадлежат типу typeinfo или одному из типов, если был передан кортеж.
# def custom_isinstance(objects, typeinfo):
#     return sum(isinstance(i, typeinfo) for i in objects)
#
#
# numbers = [1, 'two', 3.0, 'четыре', 5, 6.0]
# print(custom_isinstance(numbers, int))
#
# numbers = [1, 'two', 3.0, 'четыре', 5, 6.0]
# print(custom_isinstance(numbers, (int, float)))



# Функция должна возвращать True, если хотя бы в одном вложенном списке из списка lists сумма всех элементов больше number, или False в противном случае.
# def is_greater(lists, number):
#     return any(sum(i) > number for i in lists)
#
#
# data = [[-3, 4, 0, 1], [1, 1, -4], [0, 0], [9, 3]]
#
# print(is_greater(data, 10))



# Функция должна возвращать True, если все числа в списке numbers являются четными и неотрицательными, или False в противном случае.
# def non_negative_even(numbers):
#     return all(i % 2 == 0 and i >= 0 for i in numbers)
#
#
# print(non_negative_even([0, 2, 4, 8, 16]))
# print(non_negative_even([-8, -4, -2, 0, 2, 4, 8]))
# print(non_negative_even([64, 78, 4454, 234, 90, 78, 67676]))
#
#
# def main():
#     pass
#
#
# if __name__ == '__main__':
#     main()
